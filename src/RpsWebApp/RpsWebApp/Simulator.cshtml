@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    Page.Title = "Vehicle Player";
    Page.MobileAppCapable = true;
}

@section AdditionalPageHead {
    <link rel="stylesheet" href="//cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
}

<div class="container">
    <h3>Vehicle</h3>
    <div class="form-group">
        <label class="control-label">Vehicle:</label>
        <select id="vehicleId" class="form-control">
            <option value="7169">7169</option>
            <option value="9031200002407190">9031200002407190 (Kruse)</option>
            <option value="9031200002407191">9031200002407191 (Kruse)</option>
            <option value="9031200000101300">9031200000101300 (Arriva)</option>
            <option value="1300">1300 (Arriva)</option>
        </select>
    </div>

    <div class="form-group">
        <label class="control-label">Journey Id:</label>
        <input id="journeyId" class="form-control" />
    </div>

    <div id="input">
        <h3>Data</h3>
        <div class="form-group">
            <label class="control-label">Positions (one per line):</label>
            <textarea id="positionData" class="form-control" rows="20"></textarea>        
        </div>

        <div class="form-group">
            <label class="control-label">Current Position:</label>
            <input id="currentPositionIndex" class="form-control" value="0" />
        </div>

        <button id="fixPositionDataButton" class="btn btn-default btn-xs">Autoformat</button>
    </div>

    <div id="status">
        <h3>Status</h3>
        <div id="map" style="height: 400px"></div>
        <div id="info" class="alert alert-info"></div>
    </div>

    <h3>Tracking</h3>
    <div class="">
        <button id="startTrackingButton" class="btn btn-primary">Start</button>
        <button id="stopTrackingButton" class="btn btn-primary">Stop</button>
    </div>

    <p></p>
</div>

@section AdditionalPageScript {
<script src="~/scripts/jquery.signalr-2.2.0.min.js"></script>
<script src="~/signalr/hubs"></script>
<script src="//cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
<script src="http://maps.google.com/maps/api/js?v=3.2&sensor=false"></script>    
<script src="~/scripts/leaflet-google.js"></script>
<script src="~/scripts/leaflet-geometryutil.js"></script>
<script src="~/scripts/moment.min.js"></script>
<script>

    var vehicleEventsProxy = null;
    var data = null
    var currentPositionIndex = 0;
    var trackHandle = null;
    var vehicleId = null;
    var journeyId = null;

    var map;
    var layer = null;
    var popup;
    var marker;

    function updateStatus() {
        $('#info').empty();

    }

    function openConnection() {
        $.connection.hub.start().done(function () {
            console.info('SignalR connection etablished.');
            $('#startTrackingButton').prop('disabled', trackHandle != null);
        });
    }

    function locationChanged(p) {
        position = p;

        if (lines == null)
            updateLine();

        showPosition();
    }

    function startTracking() {

        console.info('Starting tracking ...')

        if (trackHandle != null)
            clearInterval(trackHandle);

        vehicleId = $('#vehicleId').val();
        journeyId = $('#journeyId').val();

        var vehicleAssignment = {
            vehicleId: vehicleId,
            journeyId: journeyId,
            acceptedDateTime: new Date()
        };
        console.info('Assignment event occured:', vehicleAssignment);
        vehicleEventsProxy.server.vehicleAssignment(vehicleAssignment);

        var inputData = $('#positionData').val();
        var rows = inputData.split('\n');
        data = [];
        var ps = [];
        var reverse = {};

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i].split(',');
            var pos = {
                index: i,
                lat: parseFloat(row[0]),
                lng: parseFloat(row[1])
            }

            if (pos.lat == NaN || pos.lng == NaN)
                continue;

            data.push(pos);

            var p = new L.LatLng(pos.lat, pos.lng);
            ps.push(p);

            reverse[p] = i;
        }

        if (layer != null)
            map.removeLayer(layer);

        layer = new L.Polyline(ps, {
            color: 'red',
            weight: 5,
            opacity: 0.7,
            smoothFactor: 1
        })
            .on('click', function (e) {

                var p = L.GeometryUtil.closest(map, this, e.latlng, true)
                var i = reverse[p];
                var vehicleEvent = data[i];

                popup
                    .setLatLng(p)
                    .setContent('Time: ' + moment(new Date().getTime() + (vehicleEvent.index - currentPositionIndex) * 1000).format('HH:mm:ss'))
                    .openOn(map);
            });

        map.addLayer(layer);
        map.fitBounds(layer);

        currentPositionIndex = parseInt($('#currentPositionIndex').val());

        console.info('Converted input data', data);


        trackHandle = setInterval(track, 1000);

        /* Update UI */
        $('#startTrackingButton').prop('disabled', true);
        $('#stopTrackingButton').prop('disabled', false);
        $('#journeyId').prop('disabled', true);
        $('#input').hide();
        $('#status').show();
    }

    function stopTracking() {

        console.info('Stopping tracking ...')

        if (trackHandle != null)
            clearInterval(trackHandle);
        trackHandle = null;

        $('#currentPositionIndex').val(currentPositionIndex);

        /* Update UI */
        $('#startTrackingButton').prop('disabled', false);
        $('#stopTrackingButton').prop('disabled', true);
        $('#journeyId').prop('disabled', false);
        $('#input').show();
        $('#status').hide();
    }

    function track() {

        if (currentPositionIndex >= data.length) {
            console.info('Simulation Complete ...')
            stopTracking();
        }

        var speed = 0;
        var row = data[currentPositionIndex];
        var latlng = L.latLng(row.lat, row.lng);
        marker.setLatLng(latlng)

        if (currentPositionIndex > 0) {
            var prevRow = data[currentPositionIndex - 1];
            var prevLatlng = L.latLng(prevRow.lat, prevRow.lng);
            speed = prevLatlng.distanceTo(latlng);
        }

        var vehiclePosition = {
            vehicleId: vehicleId,
            timestamp: new Date().getTime(),
            lat: row.lat,
            lng: row.lng,
            accuracy: 5,
            speed: speed,
            direction: 270
        };
        console.info('Tracking event occured:', vehiclePosition);
        vehicleEventsProxy.server.vehiclePosition(vehiclePosition);

        currentPositionIndex++
    }

    $(function () {
        $('#startTrackingButton').click(function () {
            startTracking();
        });

        $('#stopTrackingButton').click(function () {
            stopTracking();
        });

        $('#startTrackingButton').prop('disabled', true);
        $('#stopTrackingButton').prop('disabled', true);
        
        var googleMapLayer = new L.Google('ROADMAP');
        var googleSatelliteLayer = new L.Google('SATELLITE');
        var layer = L.tileLayer('http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.jpeg', {
            attribution: 'Tiles by <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
            subdomains: '1234'
        });

        /* Create map instance. */
        map = L.map('map', {
            attributionControl: false, /* Hide for Google aps */
            layers: [layer]
        }).setView([55.685570, 12.482955], 13);

        var baseMaps = {
            "Vejkort (OSM)": layer,
            "Vejkort (Google)": googleMapLayer,
            "Satellit (Google)": googleSatelliteLayer
        };

        L.control.layers(baseMaps).addTo(map);

        /* Create singleton popup instance. */
        popup = L.popup();
        marker = L.marker([0, 0]).addTo(map);;

        vehicleEventsProxy = $.connection.vehicleEvents

        $('#fixPositionDataButton').click(function () {            
            var fixed = $('#positionData').val();
            fixed = fixed.replace(/,/g, '.');
            fixed = fixed.replace(/\t/g, ',');
            console.log(fixed);
            $('#positionData').val(fixed);
        });

        $.extend(vehicleEventsProxy.client, {
            someMethod: function () { }
        });

        $.connection.hub.disconnected(function () {
            console.warn('SignalR connection lost.');
            $('#startTrackingButton').prop('disabled', true);

            setTimeout(function () {
                console.info('SignalR connection reconnecting.');
                openConnection();
            }, 5000); // Restart connection after 5 seconds.
        });

        openConnection();

        $('#status').hide();

    });
</script>
}